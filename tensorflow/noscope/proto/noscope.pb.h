// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: noscope.proto

#ifndef PROTOBUF_noscope_2eproto__INCLUDED
#define PROTOBUF_noscope_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace noscope {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_noscope_2eproto();
void protobuf_AssignDesc_noscope_2eproto();
void protobuf_ShutdownFile_noscope_2eproto();

class VideoParameter;
class StreamParameter;

// ===================================================================

class VideoParameter : public ::google::protobuf::Message {
 public:
  VideoParameter();
  virtual ~VideoParameter();

  VideoParameter(const VideoParameter& from);

  inline VideoParameter& operator=(const VideoParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VideoParameter& default_instance();

  void Swap(VideoParameter* other);

  // implements Message ----------------------------------------------

  VideoParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VideoParameter& from);
  void MergeFrom(const VideoParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string path = 1;
  inline bool has_path() const;
  inline void clear_path();
  static const int kPathFieldNumber = 1;
  inline const ::std::string& path() const;
  inline void set_path(const ::std::string& value);
  inline void set_path(const char* value);
  inline void set_path(const char* value, size_t size);
  inline ::std::string* mutable_path();
  inline ::std::string* release_path();
  inline void set_allocated_path(::std::string* path);

  // optional uint32 skip = 2 [default = 30];
  inline bool has_skip() const;
  inline void clear_skip();
  static const int kSkipFieldNumber = 2;
  inline ::google::protobuf::uint32 skip() const;
  inline void set_skip(::google::protobuf::uint32 value);

  // optional uint32 frame_size = 3;
  inline bool has_frame_size() const;
  inline void clear_frame_size();
  static const int kFrameSizeFieldNumber = 3;
  inline ::google::protobuf::uint32 frame_size() const;
  inline void set_frame_size(::google::protobuf::uint32 value);

  // optional uint32 start = 4 [default = 1];
  inline bool has_start() const;
  inline void clear_start();
  static const int kStartFieldNumber = 4;
  inline ::google::protobuf::uint32 start() const;
  inline void set_start(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:noscope.VideoParameter)
 private:
  inline void set_has_path();
  inline void clear_has_path();
  inline void set_has_skip();
  inline void clear_has_skip();
  inline void set_has_frame_size();
  inline void clear_has_frame_size();
  inline void set_has_start();
  inline void clear_has_start();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* path_;
  ::google::protobuf::uint32 skip_;
  ::google::protobuf::uint32 frame_size_;
  ::google::protobuf::uint32 start_;
  friend void  protobuf_AddDesc_noscope_2eproto();
  friend void protobuf_AssignDesc_noscope_2eproto();
  friend void protobuf_ShutdownFile_noscope_2eproto();

  void InitAsDefaultInstance();
  static VideoParameter* default_instance_;
};
// -------------------------------------------------------------------

class StreamParameter : public ::google::protobuf::Message {
 public:
  StreamParameter();
  virtual ~StreamParameter();

  StreamParameter(const StreamParameter& from);

  inline StreamParameter& operator=(const StreamParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StreamParameter& default_instance();

  void Swap(StreamParameter* other);

  // implements Message ----------------------------------------------

  StreamParameter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StreamParameter& from);
  void MergeFrom(const StreamParameter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string avg_fname = 1;
  inline bool has_avg_fname() const;
  inline void clear_avg_fname();
  static const int kAvgFnameFieldNumber = 1;
  inline const ::std::string& avg_fname() const;
  inline void set_avg_fname(const ::std::string& value);
  inline void set_avg_fname(const char* value);
  inline void set_avg_fname(const char* value, size_t size);
  inline ::std::string* mutable_avg_fname();
  inline ::std::string* release_avg_fname();
  inline void set_allocated_avg_fname(::std::string* avg_fname);

  // optional bool use_blocked = 2 [default = false];
  inline bool has_use_blocked() const;
  inline void clear_use_blocked();
  static const int kUseBlockedFieldNumber = 2;
  inline bool use_blocked() const;
  inline void set_use_blocked(bool value);

  // optional bool skip_diff_detection = 3 [default = false];
  inline bool has_skip_diff_detection() const;
  inline void clear_skip_diff_detection();
  static const int kSkipDiffDetectionFieldNumber = 3;
  inline bool skip_diff_detection() const;
  inline void set_skip_diff_detection(bool value);

  // optional float lower_thresh = 4 [default = 0];
  inline bool has_lower_thresh() const;
  inline void clear_lower_thresh();
  static const int kLowerThreshFieldNumber = 4;
  inline float lower_thresh() const;
  inline void set_lower_thresh(float value);

  // optional float upper_thresh = 5 [default = 1e+07];
  inline bool has_upper_thresh() const;
  inline void clear_upper_thresh();
  static const int kUpperThreshFieldNumber = 5;
  inline float upper_thresh() const;
  inline void set_upper_thresh(float value);

  // optional bool const_ref = 6 [default = false];
  inline bool has_const_ref() const;
  inline void clear_const_ref();
  static const int kConstRefFieldNumber = 6;
  inline bool const_ref() const;
  inline void set_const_ref(bool value);

  // optional uint32 ref = 7 [default = 0];
  inline bool has_ref() const;
  inline void clear_ref();
  static const int kRefFieldNumber = 7;
  inline ::google::protobuf::uint32 ref() const;
  inline void set_ref(::google::protobuf::uint32 value);

  // optional float distill_thresh_lower = 8;
  inline bool has_distill_thresh_lower() const;
  inline void clear_distill_thresh_lower();
  static const int kDistillThreshLowerFieldNumber = 8;
  inline float distill_thresh_lower() const;
  inline void set_distill_thresh_lower(float value);

  // optional float distill_thresh_upper = 9;
  inline bool has_distill_thresh_upper() const;
  inline void clear_distill_thresh_upper();
  static const int kDistillThreshUpperFieldNumber = 9;
  inline float distill_thresh_upper() const;
  inline void set_distill_thresh_upper(float value);

  // optional .noscope.VideoParameter video_param = 10;
  inline bool has_video_param() const;
  inline void clear_video_param();
  static const int kVideoParamFieldNumber = 10;
  inline const ::noscope::VideoParameter& video_param() const;
  inline ::noscope::VideoParameter* mutable_video_param();
  inline ::noscope::VideoParameter* release_video_param();
  inline void set_allocated_video_param(::noscope::VideoParameter* video_param);

  // @@protoc_insertion_point(class_scope:noscope.StreamParameter)
 private:
  inline void set_has_avg_fname();
  inline void clear_has_avg_fname();
  inline void set_has_use_blocked();
  inline void clear_has_use_blocked();
  inline void set_has_skip_diff_detection();
  inline void clear_has_skip_diff_detection();
  inline void set_has_lower_thresh();
  inline void clear_has_lower_thresh();
  inline void set_has_upper_thresh();
  inline void clear_has_upper_thresh();
  inline void set_has_const_ref();
  inline void clear_has_const_ref();
  inline void set_has_ref();
  inline void clear_has_ref();
  inline void set_has_distill_thresh_lower();
  inline void clear_has_distill_thresh_lower();
  inline void set_has_distill_thresh_upper();
  inline void clear_has_distill_thresh_upper();
  inline void set_has_video_param();
  inline void clear_has_video_param();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* avg_fname_;
  bool use_blocked_;
  bool skip_diff_detection_;
  bool const_ref_;
  float lower_thresh_;
  float upper_thresh_;
  ::google::protobuf::uint32 ref_;
  float distill_thresh_lower_;
  float distill_thresh_upper_;
  ::noscope::VideoParameter* video_param_;
  friend void  protobuf_AddDesc_noscope_2eproto();
  friend void protobuf_AssignDesc_noscope_2eproto();
  friend void protobuf_ShutdownFile_noscope_2eproto();

  void InitAsDefaultInstance();
  static StreamParameter* default_instance_;
};
// ===================================================================


// ===================================================================

// VideoParameter

// optional string path = 1;
inline bool VideoParameter::has_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VideoParameter::set_has_path() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VideoParameter::clear_has_path() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VideoParameter::clear_path() {
  if (path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    path_->clear();
  }
  clear_has_path();
}
inline const ::std::string& VideoParameter::path() const {
  // @@protoc_insertion_point(field_get:noscope.VideoParameter.path)
  return *path_;
}
inline void VideoParameter::set_path(const ::std::string& value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    path_ = new ::std::string;
  }
  path_->assign(value);
  // @@protoc_insertion_point(field_set:noscope.VideoParameter.path)
}
inline void VideoParameter::set_path(const char* value) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    path_ = new ::std::string;
  }
  path_->assign(value);
  // @@protoc_insertion_point(field_set_char:noscope.VideoParameter.path)
}
inline void VideoParameter::set_path(const char* value, size_t size) {
  set_has_path();
  if (path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    path_ = new ::std::string;
  }
  path_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:noscope.VideoParameter.path)
}
inline ::std::string* VideoParameter::mutable_path() {
  set_has_path();
  if (path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    path_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:noscope.VideoParameter.path)
  return path_;
}
inline ::std::string* VideoParameter::release_path() {
  clear_has_path();
  if (path_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = path_;
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void VideoParameter::set_allocated_path(::std::string* path) {
  if (path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete path_;
  }
  if (path) {
    set_has_path();
    path_ = path;
  } else {
    clear_has_path();
    path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:noscope.VideoParameter.path)
}

// optional uint32 skip = 2 [default = 30];
inline bool VideoParameter::has_skip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VideoParameter::set_has_skip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VideoParameter::clear_has_skip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VideoParameter::clear_skip() {
  skip_ = 30u;
  clear_has_skip();
}
inline ::google::protobuf::uint32 VideoParameter::skip() const {
  // @@protoc_insertion_point(field_get:noscope.VideoParameter.skip)
  return skip_;
}
inline void VideoParameter::set_skip(::google::protobuf::uint32 value) {
  set_has_skip();
  skip_ = value;
  // @@protoc_insertion_point(field_set:noscope.VideoParameter.skip)
}

// optional uint32 frame_size = 3;
inline bool VideoParameter::has_frame_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VideoParameter::set_has_frame_size() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VideoParameter::clear_has_frame_size() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VideoParameter::clear_frame_size() {
  frame_size_ = 0u;
  clear_has_frame_size();
}
inline ::google::protobuf::uint32 VideoParameter::frame_size() const {
  // @@protoc_insertion_point(field_get:noscope.VideoParameter.frame_size)
  return frame_size_;
}
inline void VideoParameter::set_frame_size(::google::protobuf::uint32 value) {
  set_has_frame_size();
  frame_size_ = value;
  // @@protoc_insertion_point(field_set:noscope.VideoParameter.frame_size)
}

// optional uint32 start = 4 [default = 1];
inline bool VideoParameter::has_start() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void VideoParameter::set_has_start() {
  _has_bits_[0] |= 0x00000008u;
}
inline void VideoParameter::clear_has_start() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void VideoParameter::clear_start() {
  start_ = 1u;
  clear_has_start();
}
inline ::google::protobuf::uint32 VideoParameter::start() const {
  // @@protoc_insertion_point(field_get:noscope.VideoParameter.start)
  return start_;
}
inline void VideoParameter::set_start(::google::protobuf::uint32 value) {
  set_has_start();
  start_ = value;
  // @@protoc_insertion_point(field_set:noscope.VideoParameter.start)
}

// -------------------------------------------------------------------

// StreamParameter

// optional string avg_fname = 1;
inline bool StreamParameter::has_avg_fname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StreamParameter::set_has_avg_fname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StreamParameter::clear_has_avg_fname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StreamParameter::clear_avg_fname() {
  if (avg_fname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    avg_fname_->clear();
  }
  clear_has_avg_fname();
}
inline const ::std::string& StreamParameter::avg_fname() const {
  // @@protoc_insertion_point(field_get:noscope.StreamParameter.avg_fname)
  return *avg_fname_;
}
inline void StreamParameter::set_avg_fname(const ::std::string& value) {
  set_has_avg_fname();
  if (avg_fname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    avg_fname_ = new ::std::string;
  }
  avg_fname_->assign(value);
  // @@protoc_insertion_point(field_set:noscope.StreamParameter.avg_fname)
}
inline void StreamParameter::set_avg_fname(const char* value) {
  set_has_avg_fname();
  if (avg_fname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    avg_fname_ = new ::std::string;
  }
  avg_fname_->assign(value);
  // @@protoc_insertion_point(field_set_char:noscope.StreamParameter.avg_fname)
}
inline void StreamParameter::set_avg_fname(const char* value, size_t size) {
  set_has_avg_fname();
  if (avg_fname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    avg_fname_ = new ::std::string;
  }
  avg_fname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:noscope.StreamParameter.avg_fname)
}
inline ::std::string* StreamParameter::mutable_avg_fname() {
  set_has_avg_fname();
  if (avg_fname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    avg_fname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:noscope.StreamParameter.avg_fname)
  return avg_fname_;
}
inline ::std::string* StreamParameter::release_avg_fname() {
  clear_has_avg_fname();
  if (avg_fname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = avg_fname_;
    avg_fname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void StreamParameter::set_allocated_avg_fname(::std::string* avg_fname) {
  if (avg_fname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete avg_fname_;
  }
  if (avg_fname) {
    set_has_avg_fname();
    avg_fname_ = avg_fname;
  } else {
    clear_has_avg_fname();
    avg_fname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:noscope.StreamParameter.avg_fname)
}

// optional bool use_blocked = 2 [default = false];
inline bool StreamParameter::has_use_blocked() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StreamParameter::set_has_use_blocked() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StreamParameter::clear_has_use_blocked() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StreamParameter::clear_use_blocked() {
  use_blocked_ = false;
  clear_has_use_blocked();
}
inline bool StreamParameter::use_blocked() const {
  // @@protoc_insertion_point(field_get:noscope.StreamParameter.use_blocked)
  return use_blocked_;
}
inline void StreamParameter::set_use_blocked(bool value) {
  set_has_use_blocked();
  use_blocked_ = value;
  // @@protoc_insertion_point(field_set:noscope.StreamParameter.use_blocked)
}

// optional bool skip_diff_detection = 3 [default = false];
inline bool StreamParameter::has_skip_diff_detection() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StreamParameter::set_has_skip_diff_detection() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StreamParameter::clear_has_skip_diff_detection() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StreamParameter::clear_skip_diff_detection() {
  skip_diff_detection_ = false;
  clear_has_skip_diff_detection();
}
inline bool StreamParameter::skip_diff_detection() const {
  // @@protoc_insertion_point(field_get:noscope.StreamParameter.skip_diff_detection)
  return skip_diff_detection_;
}
inline void StreamParameter::set_skip_diff_detection(bool value) {
  set_has_skip_diff_detection();
  skip_diff_detection_ = value;
  // @@protoc_insertion_point(field_set:noscope.StreamParameter.skip_diff_detection)
}

// optional float lower_thresh = 4 [default = 0];
inline bool StreamParameter::has_lower_thresh() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StreamParameter::set_has_lower_thresh() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StreamParameter::clear_has_lower_thresh() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StreamParameter::clear_lower_thresh() {
  lower_thresh_ = 0;
  clear_has_lower_thresh();
}
inline float StreamParameter::lower_thresh() const {
  // @@protoc_insertion_point(field_get:noscope.StreamParameter.lower_thresh)
  return lower_thresh_;
}
inline void StreamParameter::set_lower_thresh(float value) {
  set_has_lower_thresh();
  lower_thresh_ = value;
  // @@protoc_insertion_point(field_set:noscope.StreamParameter.lower_thresh)
}

// optional float upper_thresh = 5 [default = 1e+07];
inline bool StreamParameter::has_upper_thresh() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void StreamParameter::set_has_upper_thresh() {
  _has_bits_[0] |= 0x00000010u;
}
inline void StreamParameter::clear_has_upper_thresh() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void StreamParameter::clear_upper_thresh() {
  upper_thresh_ = 1e+07f;
  clear_has_upper_thresh();
}
inline float StreamParameter::upper_thresh() const {
  // @@protoc_insertion_point(field_get:noscope.StreamParameter.upper_thresh)
  return upper_thresh_;
}
inline void StreamParameter::set_upper_thresh(float value) {
  set_has_upper_thresh();
  upper_thresh_ = value;
  // @@protoc_insertion_point(field_set:noscope.StreamParameter.upper_thresh)
}

// optional bool const_ref = 6 [default = false];
inline bool StreamParameter::has_const_ref() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void StreamParameter::set_has_const_ref() {
  _has_bits_[0] |= 0x00000020u;
}
inline void StreamParameter::clear_has_const_ref() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void StreamParameter::clear_const_ref() {
  const_ref_ = false;
  clear_has_const_ref();
}
inline bool StreamParameter::const_ref() const {
  // @@protoc_insertion_point(field_get:noscope.StreamParameter.const_ref)
  return const_ref_;
}
inline void StreamParameter::set_const_ref(bool value) {
  set_has_const_ref();
  const_ref_ = value;
  // @@protoc_insertion_point(field_set:noscope.StreamParameter.const_ref)
}

// optional uint32 ref = 7 [default = 0];
inline bool StreamParameter::has_ref() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void StreamParameter::set_has_ref() {
  _has_bits_[0] |= 0x00000040u;
}
inline void StreamParameter::clear_has_ref() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void StreamParameter::clear_ref() {
  ref_ = 0u;
  clear_has_ref();
}
inline ::google::protobuf::uint32 StreamParameter::ref() const {
  // @@protoc_insertion_point(field_get:noscope.StreamParameter.ref)
  return ref_;
}
inline void StreamParameter::set_ref(::google::protobuf::uint32 value) {
  set_has_ref();
  ref_ = value;
  // @@protoc_insertion_point(field_set:noscope.StreamParameter.ref)
}

// optional float distill_thresh_lower = 8;
inline bool StreamParameter::has_distill_thresh_lower() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void StreamParameter::set_has_distill_thresh_lower() {
  _has_bits_[0] |= 0x00000080u;
}
inline void StreamParameter::clear_has_distill_thresh_lower() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void StreamParameter::clear_distill_thresh_lower() {
  distill_thresh_lower_ = 0;
  clear_has_distill_thresh_lower();
}
inline float StreamParameter::distill_thresh_lower() const {
  // @@protoc_insertion_point(field_get:noscope.StreamParameter.distill_thresh_lower)
  return distill_thresh_lower_;
}
inline void StreamParameter::set_distill_thresh_lower(float value) {
  set_has_distill_thresh_lower();
  distill_thresh_lower_ = value;
  // @@protoc_insertion_point(field_set:noscope.StreamParameter.distill_thresh_lower)
}

// optional float distill_thresh_upper = 9;
inline bool StreamParameter::has_distill_thresh_upper() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void StreamParameter::set_has_distill_thresh_upper() {
  _has_bits_[0] |= 0x00000100u;
}
inline void StreamParameter::clear_has_distill_thresh_upper() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void StreamParameter::clear_distill_thresh_upper() {
  distill_thresh_upper_ = 0;
  clear_has_distill_thresh_upper();
}
inline float StreamParameter::distill_thresh_upper() const {
  // @@protoc_insertion_point(field_get:noscope.StreamParameter.distill_thresh_upper)
  return distill_thresh_upper_;
}
inline void StreamParameter::set_distill_thresh_upper(float value) {
  set_has_distill_thresh_upper();
  distill_thresh_upper_ = value;
  // @@protoc_insertion_point(field_set:noscope.StreamParameter.distill_thresh_upper)
}

// optional .noscope.VideoParameter video_param = 10;
inline bool StreamParameter::has_video_param() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void StreamParameter::set_has_video_param() {
  _has_bits_[0] |= 0x00000200u;
}
inline void StreamParameter::clear_has_video_param() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void StreamParameter::clear_video_param() {
  if (video_param_ != NULL) video_param_->::noscope::VideoParameter::Clear();
  clear_has_video_param();
}
inline const ::noscope::VideoParameter& StreamParameter::video_param() const {
  // @@protoc_insertion_point(field_get:noscope.StreamParameter.video_param)
  return video_param_ != NULL ? *video_param_ : *default_instance_->video_param_;
}
inline ::noscope::VideoParameter* StreamParameter::mutable_video_param() {
  set_has_video_param();
  if (video_param_ == NULL) video_param_ = new ::noscope::VideoParameter;
  // @@protoc_insertion_point(field_mutable:noscope.StreamParameter.video_param)
  return video_param_;
}
inline ::noscope::VideoParameter* StreamParameter::release_video_param() {
  clear_has_video_param();
  ::noscope::VideoParameter* temp = video_param_;
  video_param_ = NULL;
  return temp;
}
inline void StreamParameter::set_allocated_video_param(::noscope::VideoParameter* video_param) {
  delete video_param_;
  video_param_ = video_param;
  if (video_param) {
    set_has_video_param();
  } else {
    clear_has_video_param();
  }
  // @@protoc_insertion_point(field_set_allocated:noscope.StreamParameter.video_param)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace noscope

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_noscope_2eproto__INCLUDED
