// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: noscope.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "noscope.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace noscope {

namespace {

const ::google::protobuf::Descriptor* VideoParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VideoParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* StreamParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StreamParameter_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_noscope_2eproto() {
  protobuf_AddDesc_noscope_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "noscope.proto");
  GOOGLE_CHECK(file != NULL);
  VideoParameter_descriptor_ = file->message_type(0);
  static const int VideoParameter_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoParameter, path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoParameter, skip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoParameter, frame_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoParameter, start_),
  };
  VideoParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VideoParameter_descriptor_,
      VideoParameter::default_instance_,
      VideoParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VideoParameter));
  StreamParameter_descriptor_ = file->message_type(1);
  static const int StreamParameter_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamParameter, avg_fname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamParameter, use_blocked_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamParameter, skip_diff_detection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamParameter, lower_thresh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamParameter, upper_thresh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamParameter, const_ref_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamParameter, ref_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamParameter, distill_thresh_lower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamParameter, distill_thresh_upper_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamParameter, video_param_),
  };
  StreamParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StreamParameter_descriptor_,
      StreamParameter::default_instance_,
      StreamParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StreamParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StreamParameter));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_noscope_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VideoParameter_descriptor_, &VideoParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StreamParameter_descriptor_, &StreamParameter::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_noscope_2eproto() {
  delete VideoParameter::default_instance_;
  delete VideoParameter_reflection_;
  delete StreamParameter::default_instance_;
  delete StreamParameter_reflection_;
}

void protobuf_AddDesc_noscope_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rnoscope.proto\022\007noscope\"V\n\016VideoParamet"
    "er\022\014\n\004path\030\001 \001(\t\022\020\n\004skip\030\002 \001(\r:\00230\022\022\n\nfr"
    "ame_size\030\003 \001(\r\022\020\n\005start\030\004 \001(\r:\0011\"\256\002\n\017Str"
    "eamParameter\022\021\n\tavg_fname\030\001 \001(\t\022\032\n\013use_b"
    "locked\030\002 \001(\010:\005false\022\"\n\023skip_diff_detecti"
    "on\030\003 \001(\010:\005false\022\027\n\014lower_thresh\030\004 \001(\002:\0010"
    "\022\033\n\014upper_thresh\030\005 \001(\002:\0051e+07\022\030\n\tconst_r"
    "ef\030\006 \001(\010:\005false\022\016\n\003ref\030\007 \001(\r:\0010\022\034\n\024disti"
    "ll_thresh_lower\030\010 \001(\002\022\034\n\024distill_thresh_"
    "upper\030\t \001(\002\022,\n\013video_param\030\n \001(\0132\027.nosco"
    "pe.VideoParameter", 417);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "noscope.proto", &protobuf_RegisterTypes);
  VideoParameter::default_instance_ = new VideoParameter();
  StreamParameter::default_instance_ = new StreamParameter();
  VideoParameter::default_instance_->InitAsDefaultInstance();
  StreamParameter::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_noscope_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_noscope_2eproto {
  StaticDescriptorInitializer_noscope_2eproto() {
    protobuf_AddDesc_noscope_2eproto();
  }
} static_descriptor_initializer_noscope_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int VideoParameter::kPathFieldNumber;
const int VideoParameter::kSkipFieldNumber;
const int VideoParameter::kFrameSizeFieldNumber;
const int VideoParameter::kStartFieldNumber;
#endif  // !_MSC_VER

VideoParameter::VideoParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:noscope.VideoParameter)
}

void VideoParameter::InitAsDefaultInstance() {
}

VideoParameter::VideoParameter(const VideoParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:noscope.VideoParameter)
}

void VideoParameter::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  path_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  skip_ = 30u;
  frame_size_ = 0u;
  start_ = 1u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VideoParameter::~VideoParameter() {
  // @@protoc_insertion_point(destructor:noscope.VideoParameter)
  SharedDtor();
}

void VideoParameter::SharedDtor() {
  if (path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete path_;
  }
  if (this != default_instance_) {
  }
}

void VideoParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VideoParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VideoParameter_descriptor_;
}

const VideoParameter& VideoParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_noscope_2eproto();
  return *default_instance_;
}

VideoParameter* VideoParameter::default_instance_ = NULL;

VideoParameter* VideoParameter::New() const {
  return new VideoParameter;
}

void VideoParameter::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_path()) {
      if (path_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        path_->clear();
      }
    }
    skip_ = 30u;
    frame_size_ = 0u;
    start_ = 1u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VideoParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:noscope.VideoParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string path = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "path");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_skip;
        break;
      }

      // optional uint32 skip = 2 [default = 30];
      case 2: {
        if (tag == 16) {
         parse_skip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skip_)));
          set_has_skip();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_frame_size;
        break;
      }

      // optional uint32 frame_size = 3;
      case 3: {
        if (tag == 24) {
         parse_frame_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &frame_size_)));
          set_has_frame_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_start;
        break;
      }

      // optional uint32 start = 4 [default = 1];
      case 4: {
        if (tag == 32) {
         parse_start:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &start_)));
          set_has_start();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:noscope.VideoParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:noscope.VideoParameter)
  return false;
#undef DO_
}

void VideoParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:noscope.VideoParameter)
  // optional string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->path(), output);
  }

  // optional uint32 skip = 2 [default = 30];
  if (has_skip()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->skip(), output);
  }

  // optional uint32 frame_size = 3;
  if (has_frame_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->frame_size(), output);
  }

  // optional uint32 start = 4 [default = 1];
  if (has_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->start(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:noscope.VideoParameter)
}

::google::protobuf::uint8* VideoParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:noscope.VideoParameter)
  // optional string path = 1;
  if (has_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->path(), target);
  }

  // optional uint32 skip = 2 [default = 30];
  if (has_skip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->skip(), target);
  }

  // optional uint32 frame_size = 3;
  if (has_frame_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->frame_size(), target);
  }

  // optional uint32 start = 4 [default = 1];
  if (has_start()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->start(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:noscope.VideoParameter)
  return target;
}

int VideoParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string path = 1;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->path());
    }

    // optional uint32 skip = 2 [default = 30];
    if (has_skip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skip());
    }

    // optional uint32 frame_size = 3;
    if (has_frame_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->frame_size());
    }

    // optional uint32 start = 4 [default = 1];
    if (has_start()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->start());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VideoParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VideoParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VideoParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VideoParameter::MergeFrom(const VideoParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_path()) {
      set_path(from.path());
    }
    if (from.has_skip()) {
      set_skip(from.skip());
    }
    if (from.has_frame_size()) {
      set_frame_size(from.frame_size());
    }
    if (from.has_start()) {
      set_start(from.start());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VideoParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VideoParameter::CopyFrom(const VideoParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoParameter::IsInitialized() const {

  return true;
}

void VideoParameter::Swap(VideoParameter* other) {
  if (other != this) {
    std::swap(path_, other->path_);
    std::swap(skip_, other->skip_);
    std::swap(frame_size_, other->frame_size_);
    std::swap(start_, other->start_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VideoParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VideoParameter_descriptor_;
  metadata.reflection = VideoParameter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StreamParameter::kAvgFnameFieldNumber;
const int StreamParameter::kUseBlockedFieldNumber;
const int StreamParameter::kSkipDiffDetectionFieldNumber;
const int StreamParameter::kLowerThreshFieldNumber;
const int StreamParameter::kUpperThreshFieldNumber;
const int StreamParameter::kConstRefFieldNumber;
const int StreamParameter::kRefFieldNumber;
const int StreamParameter::kDistillThreshLowerFieldNumber;
const int StreamParameter::kDistillThreshUpperFieldNumber;
const int StreamParameter::kVideoParamFieldNumber;
#endif  // !_MSC_VER

StreamParameter::StreamParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:noscope.StreamParameter)
}

void StreamParameter::InitAsDefaultInstance() {
  video_param_ = const_cast< ::noscope::VideoParameter*>(&::noscope::VideoParameter::default_instance());
}

StreamParameter::StreamParameter(const StreamParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:noscope.StreamParameter)
}

void StreamParameter::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  avg_fname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  use_blocked_ = false;
  skip_diff_detection_ = false;
  lower_thresh_ = 0;
  upper_thresh_ = 1e+07f;
  const_ref_ = false;
  ref_ = 0u;
  distill_thresh_lower_ = 0;
  distill_thresh_upper_ = 0;
  video_param_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StreamParameter::~StreamParameter() {
  // @@protoc_insertion_point(destructor:noscope.StreamParameter)
  SharedDtor();
}

void StreamParameter::SharedDtor() {
  if (avg_fname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete avg_fname_;
  }
  if (this != default_instance_) {
    delete video_param_;
  }
}

void StreamParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StreamParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StreamParameter_descriptor_;
}

const StreamParameter& StreamParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_noscope_2eproto();
  return *default_instance_;
}

StreamParameter* StreamParameter::default_instance_ = NULL;

StreamParameter* StreamParameter::New() const {
  return new StreamParameter;
}

void StreamParameter::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<StreamParameter*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(use_blocked_, lower_thresh_);
    ZR_(ref_, distill_thresh_lower_);
    if (has_avg_fname()) {
      if (avg_fname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        avg_fname_->clear();
      }
    }
    upper_thresh_ = 1e+07f;
  }
  if (_has_bits_[8 / 32] & 768) {
    distill_thresh_upper_ = 0;
    if (has_video_param()) {
      if (video_param_ != NULL) video_param_->::noscope::VideoParameter::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StreamParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:noscope.StreamParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string avg_fname = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_avg_fname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->avg_fname().data(), this->avg_fname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "avg_fname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_use_blocked;
        break;
      }

      // optional bool use_blocked = 2 [default = false];
      case 2: {
        if (tag == 16) {
         parse_use_blocked:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_blocked_)));
          set_has_use_blocked();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_skip_diff_detection;
        break;
      }

      // optional bool skip_diff_detection = 3 [default = false];
      case 3: {
        if (tag == 24) {
         parse_skip_diff_detection:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &skip_diff_detection_)));
          set_has_skip_diff_detection();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_lower_thresh;
        break;
      }

      // optional float lower_thresh = 4 [default = 0];
      case 4: {
        if (tag == 37) {
         parse_lower_thresh:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lower_thresh_)));
          set_has_lower_thresh();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_upper_thresh;
        break;
      }

      // optional float upper_thresh = 5 [default = 1e+07];
      case 5: {
        if (tag == 45) {
         parse_upper_thresh:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &upper_thresh_)));
          set_has_upper_thresh();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_const_ref;
        break;
      }

      // optional bool const_ref = 6 [default = false];
      case 6: {
        if (tag == 48) {
         parse_const_ref:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &const_ref_)));
          set_has_const_ref();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_ref;
        break;
      }

      // optional uint32 ref = 7 [default = 0];
      case 7: {
        if (tag == 56) {
         parse_ref:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ref_)));
          set_has_ref();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(69)) goto parse_distill_thresh_lower;
        break;
      }

      // optional float distill_thresh_lower = 8;
      case 8: {
        if (tag == 69) {
         parse_distill_thresh_lower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &distill_thresh_lower_)));
          set_has_distill_thresh_lower();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(77)) goto parse_distill_thresh_upper;
        break;
      }

      // optional float distill_thresh_upper = 9;
      case 9: {
        if (tag == 77) {
         parse_distill_thresh_upper:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &distill_thresh_upper_)));
          set_has_distill_thresh_upper();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_video_param;
        break;
      }

      // optional .noscope.VideoParameter video_param = 10;
      case 10: {
        if (tag == 82) {
         parse_video_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_video_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:noscope.StreamParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:noscope.StreamParameter)
  return false;
#undef DO_
}

void StreamParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:noscope.StreamParameter)
  // optional string avg_fname = 1;
  if (has_avg_fname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->avg_fname().data(), this->avg_fname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "avg_fname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->avg_fname(), output);
  }

  // optional bool use_blocked = 2 [default = false];
  if (has_use_blocked()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->use_blocked(), output);
  }

  // optional bool skip_diff_detection = 3 [default = false];
  if (has_skip_diff_detection()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->skip_diff_detection(), output);
  }

  // optional float lower_thresh = 4 [default = 0];
  if (has_lower_thresh()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->lower_thresh(), output);
  }

  // optional float upper_thresh = 5 [default = 1e+07];
  if (has_upper_thresh()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->upper_thresh(), output);
  }

  // optional bool const_ref = 6 [default = false];
  if (has_const_ref()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->const_ref(), output);
  }

  // optional uint32 ref = 7 [default = 0];
  if (has_ref()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->ref(), output);
  }

  // optional float distill_thresh_lower = 8;
  if (has_distill_thresh_lower()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->distill_thresh_lower(), output);
  }

  // optional float distill_thresh_upper = 9;
  if (has_distill_thresh_upper()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->distill_thresh_upper(), output);
  }

  // optional .noscope.VideoParameter video_param = 10;
  if (has_video_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->video_param(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:noscope.StreamParameter)
}

::google::protobuf::uint8* StreamParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:noscope.StreamParameter)
  // optional string avg_fname = 1;
  if (has_avg_fname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->avg_fname().data(), this->avg_fname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "avg_fname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->avg_fname(), target);
  }

  // optional bool use_blocked = 2 [default = false];
  if (has_use_blocked()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->use_blocked(), target);
  }

  // optional bool skip_diff_detection = 3 [default = false];
  if (has_skip_diff_detection()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->skip_diff_detection(), target);
  }

  // optional float lower_thresh = 4 [default = 0];
  if (has_lower_thresh()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->lower_thresh(), target);
  }

  // optional float upper_thresh = 5 [default = 1e+07];
  if (has_upper_thresh()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->upper_thresh(), target);
  }

  // optional bool const_ref = 6 [default = false];
  if (has_const_ref()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->const_ref(), target);
  }

  // optional uint32 ref = 7 [default = 0];
  if (has_ref()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->ref(), target);
  }

  // optional float distill_thresh_lower = 8;
  if (has_distill_thresh_lower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->distill_thresh_lower(), target);
  }

  // optional float distill_thresh_upper = 9;
  if (has_distill_thresh_upper()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->distill_thresh_upper(), target);
  }

  // optional .noscope.VideoParameter video_param = 10;
  if (has_video_param()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->video_param(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:noscope.StreamParameter)
  return target;
}

int StreamParameter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string avg_fname = 1;
    if (has_avg_fname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->avg_fname());
    }

    // optional bool use_blocked = 2 [default = false];
    if (has_use_blocked()) {
      total_size += 1 + 1;
    }

    // optional bool skip_diff_detection = 3 [default = false];
    if (has_skip_diff_detection()) {
      total_size += 1 + 1;
    }

    // optional float lower_thresh = 4 [default = 0];
    if (has_lower_thresh()) {
      total_size += 1 + 4;
    }

    // optional float upper_thresh = 5 [default = 1e+07];
    if (has_upper_thresh()) {
      total_size += 1 + 4;
    }

    // optional bool const_ref = 6 [default = false];
    if (has_const_ref()) {
      total_size += 1 + 1;
    }

    // optional uint32 ref = 7 [default = 0];
    if (has_ref()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ref());
    }

    // optional float distill_thresh_lower = 8;
    if (has_distill_thresh_lower()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float distill_thresh_upper = 9;
    if (has_distill_thresh_upper()) {
      total_size += 1 + 4;
    }

    // optional .noscope.VideoParameter video_param = 10;
    if (has_video_param()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->video_param());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StreamParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StreamParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StreamParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StreamParameter::MergeFrom(const StreamParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_avg_fname()) {
      set_avg_fname(from.avg_fname());
    }
    if (from.has_use_blocked()) {
      set_use_blocked(from.use_blocked());
    }
    if (from.has_skip_diff_detection()) {
      set_skip_diff_detection(from.skip_diff_detection());
    }
    if (from.has_lower_thresh()) {
      set_lower_thresh(from.lower_thresh());
    }
    if (from.has_upper_thresh()) {
      set_upper_thresh(from.upper_thresh());
    }
    if (from.has_const_ref()) {
      set_const_ref(from.const_ref());
    }
    if (from.has_ref()) {
      set_ref(from.ref());
    }
    if (from.has_distill_thresh_lower()) {
      set_distill_thresh_lower(from.distill_thresh_lower());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_distill_thresh_upper()) {
      set_distill_thresh_upper(from.distill_thresh_upper());
    }
    if (from.has_video_param()) {
      mutable_video_param()->::noscope::VideoParameter::MergeFrom(from.video_param());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StreamParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamParameter::CopyFrom(const StreamParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamParameter::IsInitialized() const {

  return true;
}

void StreamParameter::Swap(StreamParameter* other) {
  if (other != this) {
    std::swap(avg_fname_, other->avg_fname_);
    std::swap(use_blocked_, other->use_blocked_);
    std::swap(skip_diff_detection_, other->skip_diff_detection_);
    std::swap(lower_thresh_, other->lower_thresh_);
    std::swap(upper_thresh_, other->upper_thresh_);
    std::swap(const_ref_, other->const_ref_);
    std::swap(ref_, other->ref_);
    std::swap(distill_thresh_lower_, other->distill_thresh_lower_);
    std::swap(distill_thresh_upper_, other->distill_thresh_upper_);
    std::swap(video_param_, other->video_param_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StreamParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StreamParameter_descriptor_;
  metadata.reflection = StreamParameter_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace noscope

// @@protoc_insertion_point(global_scope)
